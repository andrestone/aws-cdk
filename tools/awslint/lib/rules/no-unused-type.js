"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const linter_1 = require("../linter");
exports.noUnusedTypeLinter = new linter_1.Linter(assm => {
    // Only care about AWS Construct Library here...
    if (!assm.name.startsWith('@aws-cdk/aws-')) {
        return [];
    }
    const usedTypes = _collectUsedTypes(assm);
    const generatedFqnPrefix = `${assm.name}.Cfn`;
    return assm.types.filter(type => !type.isClassType())
        .filter(type => !type.fqn.startsWith(generatedFqnPrefix))
        .map(inspectedType => ({ inspectedType, usedTypes }));
});
exports.noUnusedTypeLinter.add({
    code: 'no-unused-type',
    message: 'type or enum is not used by exported classes',
    eval: evaluation => {
        evaluation.assert(evaluation.ctx.usedTypes.has(evaluation.ctx.inspectedType.fqn), evaluation.ctx.inspectedType.fqn, _formatLocation(evaluation.ctx.inspectedType.locationInModule));
    }
});
function _collectUsedTypes(assm) {
    const result = new Set();
    assm.types.filter(type => type.isClassType())
        .forEach(_visitType);
    return result;
    function _visitType(type) {
        if (typeof type === 'string') {
            const resolvedType = assm.tryFindType(type);
            if (!resolvedType) {
                return;
            }
            type = resolvedType;
        }
        if (result.has(type.fqn)) {
            return;
        }
        result.add(type.fqn);
        // Nothing else to do for enums
        if (type.isEnumType()) {
            return;
        }
        if (type.isClassType()) {
            if (type.base) {
                _visitType(type.base);
            }
            if (type.initializer) {
                for (const param of type.initializer.parameters) {
                    _visitTypeRef(param.type);
                }
            }
        }
        if (type.isClassType() || type.isInterfaceType()) {
            type.interfaces.forEach(_visitType);
            for (const prop of type.ownProperties) {
                _visitTypeRef(prop.type);
            }
            for (const meth of type.ownMethods) {
                _visitTypeRef(meth.returns.type);
                for (const param of meth.parameters) {
                    _visitTypeRef(param.type);
                }
            }
        }
    }
    function _visitTypeRef(typeRef) {
        if (typeRef.fqn) {
            const type = assm.tryFindType(typeRef.fqn);
            if (type) {
                _visitType(type);
            }
        }
        else if (typeRef.arrayOfType) {
            _visitTypeRef(typeRef.arrayOfType);
        }
        else if (typeRef.mapOfType) {
            _visitTypeRef(typeRef.mapOfType);
        }
        else if (typeRef.unionOfTypes) {
            typeRef.unionOfTypes.forEach(_visitTypeRef);
        }
    }
}
function _formatLocation(location) {
    if (!location) {
        return undefined;
    }
    return `(declared at ${location.filename}:${location.line})`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm8tdW51c2VkLXR5cGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuby11bnVzZWQtdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHNDQUFtQztBQUV0QixRQUFBLGtCQUFrQixHQUFHLElBQUksZUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ2xELGdEQUFnRDtJQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEVBQUU7UUFDMUMsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUNELE1BQU0sU0FBUyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUM7SUFDOUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUN4RCxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMxRCxDQUFDLENBQUMsQ0FBQztBQUVILDBCQUFrQixDQUFDLEdBQUcsQ0FBQztJQUNyQixJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCLE9BQU8sRUFBRSw4Q0FBOEM7SUFDdkQsSUFBSSxFQUFFLFVBQVUsQ0FBQyxFQUFFO1FBQ2pCLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUM5RSxVQUFVLENBQUMsR0FBRyxDQUFDLGFBQWEs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Q0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLFFBQW9DO0lBQzNELElBQUksQ0FBQyxRQUFRLEVBQUU7UUFBRSxPQUFPLFNBQVMsQ0FBQztLQUFFO0lBQ3BDLE9BQU8sZ0JBQWdCLFFBQVEsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDO0FBQy9ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3NlbWJseSwgU291cmNlTG9jYXRpb24sIFR5cGUsIFR5cGVSZWZlcmVuY2UgfSBmcm9tICdqc2lpLXJlZmxlY3QnO1xuaW1wb3J0IHsgTGludGVyIH0gZnJvbSAnLi4vbGludGVyJztcblxuZXhwb3J0IGNvbnN0IG5vVW51c2VkVHlwZUxpbnRlciA9IG5ldyBMaW50ZXIoYXNzbSA9PiB7XG4gIC8vIE9ubHkgY2FyZSBhYm91dCBBV1MgQ29uc3RydWN0IExpYnJhcnkgaGVyZS4uLlxuICBpZiAoIWFzc20ubmFtZS5zdGFydHNXaXRoKCdAYXdzLWNkay9hd3MtJykpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgdXNlZFR5cGVzID0gX2NvbGxlY3RVc2VkVHlwZXMoYXNzbSk7XG4gIGNvbnN0IGdlbmVyYXRlZEZxblByZWZpeCA9IGAke2Fzc20ubmFtZX0uQ2ZuYDtcbiAgcmV0dXJuIGFzc20udHlwZXMuZmlsdGVyKHR5cGUgPT4gIXR5cGUuaXNDbGFzc1R5cGUoKSlcbiAgICAuZmlsdGVyKHR5cGUgPT4gIXR5cGUuZnFuLnN0YXJ0c1dpdGgoZ2VuZXJhdGVkRnFuUHJlZml4KSlcbiAgICAubWFwKGluc3BlY3RlZFR5cGUgPT4gKHsgaW5zcGVjdGVkVHlwZSwgdXNlZFR5cGVzIH0pKTtcbn0pO1xuXG5ub1VudXNlZFR5cGVMaW50ZXIuYWRkKHtcbiAgY29kZTogJ25vLXVudXNlZC10eXBlJyxcbiAgbWVzc2FnZTogJ3R5cGUgb3IgZW51bSBpcyBub3QgdXNlZCBieSBleHBvcnRlZCBjbGFzc2VzJyxcbiAgZXZhbDogZXZhbHVhdGlvbiA9PiB7XG4gICAgZXZhbHVhdGlvbi5hc3NlcnQoZXZhbHVhdGlvbi5jdHgudXNlZFR5cGVzLmhhcyhldmFsdWF0aW9uLmN0eC5pbnNwZWN0ZWRUeXBlLmZxbiksXG4gICAgICBldmFsdWF0aW9uLmN0eC5pbnNwZWN0ZWRUeXBlLmZxbixcbiAgICAgIF9mb3JtYXRMb2NhdGlvbihldmFsdWF0aW9uLmN0eC5pbnNwZWN0ZWRUeXBlLmxvY2F0aW9uSW5Nb2R1bGUpKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIF9jb2xsZWN0VXNlZFR5cGVzKGFzc206IEFzc2VtYmx5KTogU2V0PHN0cmluZz4ge1xuICBjb25zdCByZXN1bHQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgYXNzbS50eXBlcy5maWx0ZXIodHlwZSA9PiB0eXBlLmlzQ2xhc3NUeXBlKCkpXG4gICAgLmZvckVhY2goX3Zpc2l0VHlwZSk7XG4gIHJldHVybiByZXN1bHQ7XG5cbiAgZnVuY3Rpb24gX3Zpc2l0VHlwZSh0eXBlOiBUeXBlKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgcmVzb2x2ZWRUeXBlID0gYXNzbS50cnlGaW5kVHlwZSh0eXBlKTtcbiAgICAgIGlmICghcmVzb2x2ZWRUeXBlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHR5cGUgPSByZXNvbHZlZFR5cGU7XG4gICAgfVxuICAgIGlmIChyZXN1bHQuaGFzKHR5cGUuZnFuKSkgeyByZXR1cm47IH1cbiAgICByZXN1bHQuYWRkKHR5cGUuZnFuKTtcblxuICAgIC8vIE5vdGhpbmcgZWxzZSB0byBkbyBmb3IgZW51bXNcbiAgICBpZiAodHlwZS5pc0VudW1UeXBlKCkpIHsgcmV0dXJuOyB9XG5cbiAgICBpZiAodHlwZS5pc0NsYXNzVHlwZSgpKSB7XG4gICAgICBpZiAodHlwZS5iYXNlKSB7IF92aXNpdFR5cGUodHlwZS5iYXNlKTsgfVxuICAgICAgaWYgKHR5cGUuaW5pdGlhbGl6ZXIpIHtcbiAgICAgICAgZm9yIChjb25zdCBwYXJhbSBvZiB0eXBlLmluaXRpYWxpemVyLnBhcmFtZXRlcnMpIHtcbiAgICAgICAgICBfdmlzaXRUeXBlUmVmKHBhcmFtLnR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlLmlzQ2xhc3NUeXBlKCkgfHwgdHlwZS5pc0ludGVyZmFjZVR5cGUoKSkge1xuICAgICAgdHlwZS5pbnRlcmZhY2VzLmZvckVhY2goX3Zpc2l0VHlwZSk7XG4gICAgICBmb3IgKGNvbnN0IHByb3Agb2YgdHlwZS5vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIF92aXNpdFR5cGVSZWYocHJvcC50eXBlKTtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgbWV0aCBvZiB0eXBlLm93bk1ldGhvZHMpIHtcbiAgICAgICAgX3Zpc2l0VHlwZVJlZihtZXRoLnJldHVybnMudHlwZSk7XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW0gb2YgbWV0aC5wYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgX3Zpc2l0VHlwZVJlZihwYXJhbS50eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF92aXNpdFR5cGVSZWYodHlwZVJlZjogVHlwZVJlZmVyZW5jZSkge1xuICAgIGlmICh0eXBlUmVmLmZxbikge1xuICAgICAgY29uc3QgdHlwZSA9IGFzc20udHJ5RmluZFR5cGUodHlwZVJlZi5mcW4pO1xuICAgICAgaWYgKHR5cGUpIHsgX3Zpc2l0VHlwZSh0eXBlKTsgfVxuICAgIH0gZWxzZSBpZiAodHlwZVJlZi5hcnJheU9mVHlwZSkge1xuICAgICAgX3Zpc2l0VHlwZVJlZih0eXBlUmVmLmFycmF5T2ZUeXBlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVSZWYubWFwT2ZUeXBlKSB7XG4gICAgICBfdmlzaXRUeXBlUmVmKHR5cGVSZWYubWFwT2ZUeXBlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVSZWYudW5pb25PZlR5cGVzKSB7XG4gICAgICB0eXBlUmVmLnVuaW9uT2ZUeXBlcy5mb3JFYWNoKF92aXNpdFR5cGVSZWYpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfZm9ybWF0TG9jYXRpb24obG9jYXRpb246IFNvdXJjZUxvY2F0aW9uIHwgdW5kZWZpbmVkKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgaWYgKCFsb2NhdGlvbikgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gIHJldHVybiBgKGRlY2xhcmVkIGF0ICR7bG9jYXRpb24uZmlsZW5hbWV9OiR7bG9jYXRpb24ubGluZX0pYDtcbn1cbiJdfQ==