"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const linter_1 = require("../linter");
const construct_1 = require("./construct");
const core_types_1 = require("./core-types");
exports.eventsLinter = new linter_1.Linter(assembly => assembly.classes
    .filter(t => core_types_1.CoreTypes.isConstructClass(t))
    .map(construct => new EventsReflection(construct)));
class EventsReflection extends construct_1.ConstructReflection {
    get directEventMethods() {
        return this.classType.allMethods.filter(isDirectEventMethod);
    }
    get cloudTrailEventMethods() {
        return this.classType.allMethods.filter(isCloudTrailEventMethod);
    }
}
exports.EventsReflection = EventsReflection;
const ON_EVENT_OPTIONS_FQN = '@aws-cdk/aws-events.OnEventOptions';
const EVENT_RULE_FQN = '@aws-cdk/aws-events.Rule';
exports.eventsLinter.add({
    code: 'events-in-interface',
    message: `'onXxx()' methods should also be defined on construct interface`,
    eval: e => {
        for (const method of e.ctx.directEventMethods.concat(e.ctx.cloudTrailEventMethods)) {
            e.assert(!e.ctx.interfaceType || e.ctx.interfaceType.allMethods.filter(m => !m.protected).some(m => m.name === method.name), `${e.ctx.fqn}.${method.name}`);
        }
    }
});
exports.eventsLinter.add({
    code: 'events-generic',
    message: `if there are specific 'onXxx()' methods, there should also be a generic 'onEvent()' method`,
    eval: e => {
        e.assert(e.ctx.directEventMethods.length === 0 || e.ctx.classType.allMethods.some(m => m.name === 'onEvent'), e.ctx.fqn);
    }
});
exports.eventsLinter.add({
    code: 'events-generic-cloudtrail',
    message: `if there are specific 'onCloudTrailXxx()' methods, there should also be a generic 'onCloudTrailEvent()' method`,
    eval: e => {
        e.assert(e.ctx.cloudTrailEventMethods.length === 0 || e.ctx.classType.allMethods.some(m => m.name === 'onCloudTrailEvent'), e.ctx.fqn);
    }
});
exports.eventsLinter.add({
    code: 'events-method-signature',
    message: `all 'onXxx()' methods should have the CloudWatch Events signature (id: string, options: events.OnEventOptions = {}) => events.Rule`,
    eval: e => {
        for (const method of e.ctx.directEventMethods) {
            // give slack to protected methods like "onSynthesize", "onPrepare", ...
            if (method.protected) {
                continue;
            }
            e.assertSignature(method, {
                parameters: [
                    { type: 'string' },
                    { type: ON_EVENT_OPTIONS_FQN, subtypeAllowed: true, optional: true },
                ],
                returns: EVENT_RULE_FQN
            });
        }
    }
});
function isDirectEventMethod(m) {
    return !m.protected && m.name.startsWith('on') && !m.name.startsWith('onCloudTrail');
}
function isCloudTrailEventMethod(m) {
    return m.name.startsWith('onCloudTrail');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWR3YXRjaC1ldmVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbG91ZHdhdGNoLWV2ZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLHNDQUFtQztBQUNuQywyQ0FBa0Q7QUFDbEQsNkNBQXlDO0FBRTVCLFFBQUEsWUFBWSxHQUFHLElBQUksZUFBTSxDQUFtQixRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPO0tBQ2xGLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLHNCQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdEQsTUFBYSxnQkFBaUIsU0FBUSwrQkFBbUI7SUFDdkQsSUFBVyxrQkFBa0I7UUFDM0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsSUFBVyxzQkFBc0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNuRSxDQUFDO0NBQ0Y7QUFSRCw0Q0FRQztBQUVELE1BQU0sb0JBQW9CLEdBQUcsb0NBQW9DLENBQUM7QUFDbEUsTUFBTSxjQUFjLEdBQUcsMEJBQTBCLENBQUM7QUFFbEQsb0JBQVksQ0FBQyxHQUFHLENBQUM7SUFDZixJQUFJLEVBQUUscUJBQXFCO0lBQzNCLE9BQU8sRUFBRSxpRUFBaUU7SUFDMUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFO1FBQ1IsS0FBSyxNQUFNLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLEVBQUU7WUFDbEYs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cnQgeyBMaW50ZXIgfSBmcm9tICcuLi9saW50ZXInO1xuaW1wb3J0IHsgQ29uc3RydWN0UmVmbGVjdGlvbiB9IGZyb20gJy4vY29uc3RydWN0JztcbmltcG9ydCB7IENvcmVUeXBlcyB9IGZyb20gJy4vY29yZS10eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBldmVudHNMaW50ZXIgPSBuZXcgTGludGVyPEV2ZW50c1JlZmxlY3Rpb24+KGFzc2VtYmx5ID0+IGFzc2VtYmx5LmNsYXNzZXNcbiAgLmZpbHRlcih0ID0+IENvcmVUeXBlcy5pc0NvbnN0cnVjdENsYXNzKHQpKVxuICAubWFwKGNvbnN0cnVjdCA9PiBuZXcgRXZlbnRzUmVmbGVjdGlvbihjb25zdHJ1Y3QpKSk7XG5cbmV4cG9ydCBjbGFzcyBFdmVudHNSZWZsZWN0aW9uIGV4dGVuZHMgQ29uc3RydWN0UmVmbGVjdGlvbiB7XG4gIHB1YmxpYyBnZXQgZGlyZWN0RXZlbnRNZXRob2RzKCkge1xuICAgIHJldHVybiB0aGlzLmNsYXNzVHlwZS5hbGxNZXRob2RzLmZpbHRlcihpc0RpcmVjdEV2ZW50TWV0aG9kKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2xvdWRUcmFpbEV2ZW50TWV0aG9kcygpIHtcbiAgICByZXR1cm4gdGhpcy5jbGFzc1R5cGUuYWxsTWV0aG9kcy5maWx0ZXIoaXNDbG91ZFRyYWlsRXZlbnRNZXRob2QpO1xuICB9XG59XG5cbmNvbnN0IE9OX0VWRU5UX09QVElPTlNfRlFOID0gJ0Bhd3MtY2RrL2F3cy1ldmVudHMuT25FdmVudE9wdGlvbnMnO1xuY29uc3QgRVZFTlRfUlVMRV9GUU4gPSAnQGF3cy1jZGsvYXdzLWV2ZW50cy5SdWxlJztcblxuZXZlbnRzTGludGVyLmFkZCh7XG4gIGNvZGU6ICdldmVudHMtaW4taW50ZXJmYWNlJyxcbiAgbWVzc2FnZTogYCdvblh4eCgpJyBtZXRob2RzIHNob3VsZCBhbHNvIGJlIGRlZmluZWQgb24gY29uc3RydWN0IGludGVyZmFjZWAsXG4gIGV2YWw6IGUgPT4ge1xuICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIGUuY3R4LmRpcmVjdEV2ZW50TWV0aG9kcy5jb25jYXQoZS5jdHguY2xvdWRUcmFpbEV2ZW50TWV0aG9kcykpIHtcbiAgICAgIGUuYXNzZXJ0KCFlLmN0eC5pbnRlcmZhY2VUeXBlIHx8IGUuY3R4LmludGVyZmFjZVR5cGUuYWxsTWV0aG9kcy5maWx0ZXIobSA9PiAhbS5wcm90ZWN0ZWQpLnNvbWUobSA9PiBtLm5hbWUgPT09IG1ldGhvZC5uYW1lKSwgYCR7ZS5jdHguZnFufS4ke21ldGhvZC5uYW1lfWApO1xuICAgIH1cbiAgfVxufSk7XG5cbmV2ZW50c0xpbnRlci5hZGQoe1xuICBjb2RlOiAnZXZlbnRzLWdlbmVyaWMnLFxuICBtZXNzYWdlOiBgaWYgdGhlcmUgYXJlIHNwZWNpZmljICdvblh4eCgpJyBtZXRob2RzLCB0aGVyZSBzaG91bGQgYWxzbyBiZSBhIGdlbmVyaWMgJ29uRXZlbnQoKScgbWV0aG9kYCxcbiAgZXZhbDogZSA9PiB7XG4gICAgZS5hc3NlcnQoZS5jdHguZGlyZWN0RXZlbnRNZXRob2RzLmxlbmd0aCA9PT0gMCB8fCBlLmN0eC5jbGFzc1R5cGUuYWxsTWV0aG9kcy5zb21lKG0gPT4gbS5uYW1lID09PSAnb25FdmVudCcpLCBlLmN0eC5mcW4pO1xuICB9XG59KTtcblxuZXZlbnRzTGludGVyLmFkZCh7XG4gIGNvZGU6ICdldmVudHMtZ2VuZXJpYy1jbG91ZHRyYWlsJyxcbiAgbWVzc2FnZTogYGlmIHRoZXJlIGFyZSBzcGVjaWZpYyAnb25DbG91ZFRyYWlsWHh4KCknIG1ldGhvZHMsIHRoZXJlIHNob3VsZCBhbHNvIGJlIGEgZ2VuZXJpYyAnb25DbG91ZFRyYWlsRXZlbnQoKScgbWV0aG9kYCxcbiAgZXZhbDogZSA9PiB7XG4gICAgZS5hc3NlcnQoZS5jdHguY2xvdWRUcmFpbEV2ZW50TWV0aG9kcy5sZW5ndGggPT09IDAgfHwgZS5jdHguY2xhc3NUeXBlLmFsbE1ldGhvZHMuc29tZShtID0+IG0ubmFtZSA9PT0gJ29uQ2xvdWRUcmFpbEV2ZW50JyksIGUuY3R4LmZxbik7XG4gIH1cbn0pO1xuXG5ldmVudHNMaW50ZXIuYWRkKHtcbiAgY29kZTogJ2V2ZW50cy1tZXRob2Qtc2lnbmF0dXJlJyxcbiAgbWVzc2FnZTogYGFsbCAnb25YeHgoKScgbWV0aG9kcyBzaG91bGQgaGF2ZSB0aGUgQ2xvdWRXYXRjaCBFdmVudHMgc2lnbmF0dXJlIChpZDogc3RyaW5nLCBvcHRpb25zOiBldmVudHMuT25FdmVudE9wdGlvbnMgPSB7fSkgPT4gZXZlbnRzLlJ1bGVgLFxuICBldmFsOiBlID0+IHtcbiAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBlLmN0eC5kaXJlY3RFdmVudE1ldGhvZHMpIHtcbiAgICAgIC8vIGdpdmUgc2xhY2sgdG8gcHJvdGVjdGVkIG1ldGhvZHMgbGlrZSBcIm9uU3ludGhlc2l6ZVwiLCBcIm9uUHJlcGFyZVwiLCAuLi5cbiAgICAgIGlmIChtZXRob2QucHJvdGVjdGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZS5hc3NlcnRTaWduYXR1cmUobWV0aG9kLCB7XG4gICAgICAgIHBhcmFtZXRlcnM6IFtcbiAgICAgICAgICB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgeyB0eXBlOiBPTl9FVkVOVF9PUFRJT05TX0ZRTiwgc3VidHlwZUFsbG93ZWQ6IHRydWUsIG9wdGlvbmFsOiB0cnVlIH0sXG4gICAgICAgIF0sXG4gICAgICAgIHJldHVybnM6IEVWRU5UX1JVTEVfRlFOXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBpc0RpcmVjdEV2ZW50TWV0aG9kKG06IHJlZmxlY3QuTWV0aG9kKSB7XG4gIHJldHVybiAhbS5wcm90ZWN0ZWQgJiYgbS5uYW1lLnN0YXJ0c1dpdGgoJ29uJykgJiYgISBtLm5hbWUuc3RhcnRzV2l0aCgnb25DbG91ZFRyYWlsJyk7XG59XG5cbmZ1bmN0aW9uIGlzQ2xvdWRUcmFpbEV2ZW50TWV0aG9kKG06IHJlZmxlY3QuTWV0aG9kKSB7XG4gIHJldHVybiBtLm5hbWUuc3RhcnRzV2l0aCgnb25DbG91ZFRyYWlsJyk7XG59XG4iXX0=