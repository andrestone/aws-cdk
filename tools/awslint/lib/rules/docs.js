"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const linter_1 = require("../linter");
const core_types_1 = require("./core-types");
exports.docsLinter = new linter_1.Linter(assembly => {
    return [
        ...flatMap(assembly.classes, classType => [
            { assembly, kind: 'type', documentable: classType, errorKey: classType.fqn },
            ...classType.ownProperties.map(property => ({ assembly, kind: 'class-property', containingType: classType, documentable: property, errorKey: `${classType.fqn}.${property.name}` })),
            ...classType.ownMethods.map(method => ({ assembly, kind: 'method', containingType: classType, documentable: method, errorKey: `${classType.fqn}.${method.name}` })),
        ]),
        ...flatMap(assembly.interfaces, interfaceType => [
            { assembly, kind: 'type', documentable: interfaceType, errorKey: interfaceType.fqn },
            // tslint:disable-next-line:max-line-length
            ...interfaceType.ownProperties.map(property => ({ assembly, kind: 'interface-property', containingType: interfaceType, documentable: property, errorKey: `${interfaceType.fqn}.${property.name}` })),
            ...interfaceType.ownMethods.map(method => ({ assembly, kind: 'method', containingType: interfaceType, documentable: method, errorKey: `${interfaceType.fqn}.${method.name}` })),
        ]),
        ...flatMap(assembly.enums, enumType => [
            { assembly, kind: 'type', documentable: enumType, errorKey: enumType.fqn },
            ...enumType.members.map(member => ({ assembly, kind: 'enum-member', containingType: enumType, documentable: member, errorKey: `${enumType.fqn}.${member.name}` }))
        ]),
    ];
});
exports.docsLinter.add({
    code: 'docs-public-apis',
    message: 'Public API element must have a docstring',
    eval: e => {
        if (!isPublic(e.ctx)) {
            return;
        }
        // this rule does not apply to L1 constructs
        if (isCfnType(e.ctx)) {
            return;
        }
        if (!e.ctx.documentable.docs.summary) {
            e.assert(e.ctx.documentable.docs.summary, e.ctx.errorKey);
        }
    }
});
exports.docsLinter.add({
    code: 'props-default-doc',
    message: 'Optional property must have @default documentation',
    eval: e => {
        if (e.ctx.kind !== 'interface-property') {
            return;
        }
        if (!e.ctx.containingType.isDataType()) {
            return;
        }
        // this rule does not apply to L1 constructs
        if (core_types_1.CoreTypes.isCfnType(e.ctx.containingType)) {
            return;
        }
        const property = e.ctx.documentable;
        e.assert(!property.optional || property.docs.docs.default !== undefined, e.ctx.errorKey);
    }
});
exports.docsLinter.add({
    code: 'props-no-undefined-default',
    message: `'@default undefined' is not helpful. Users will know the VALUE is literally 'undefined' if they don't specify it, but what is the BEHAVIOR if they do so?`,
    eval: e => {
        if (e.ctx.kind !== 'interface-property') {
            return;
        }
        if (!e.ctx.containingType.isDataType()) {
            return;
        }
        const property = e.ctx.documentable;
        e.assert(property.docs.docs.default !== 'undefined', e.ctx.errorKey);
    }
});
function isPublic(ctx) {
    switch (ctx.kind) {
        case "class-property":
        case "interface-property":
        case "method":
            return !ctx.documentable.protected;
        case "enum-member":
        case "type":
            return true;
    }
}
function isCfnType(ctx) {
    switch (ctx.kind) {
        case "class-property":
        case "interface-property":
        case "method":
        case "enum-member":
            return core_types_1.CoreTypes.isCfnType(ctx.containingType);
        case "type":
            return core_types_1.CoreTypes.isCfnType(ctx.documentable);
    }
}
function flatMap(array, callbackfn) {
    return Array.prototype.concat(...array.map(callbackfn));
}
//# sourceMappingURL=data:application/json;base64,